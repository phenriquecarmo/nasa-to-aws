name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize and Plan Terraform
        run: |
          terraform init
          terraform validate
          terraform plan -out=tfplan
        working-directory: terraform_infrastructure
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_ec2_ssh_key: ${{ secrets.EC2_SSH_KEY }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_user_ip: ${{ secrets.USER_IP }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform_infrastructure
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_ec2_ssh_key: ${{ secrets.EC2_SSH_KEY }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_user_ip: ${{ secrets.USER_IP }}

      - name: Build project
        run: ./gradlew clean build

      - name: Copy jar to EC2
        run: |
          echo "$EC2_SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem build/libs/nasaws-0.0.1-SNAPSHOT.jar ec2-user@${{ secrets.HOST_DNS }}:/home/ec2-user/app.jar
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Run app on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.HOST_DNS }} << 'EOF'
            export NASA_API_KEY=$(aws secretsmanager get-secret-value --secret-id nasa_api_key --query SecretString --output text | jq -r '.NASA_API_KEY')
            export DB_USERNAME=$(aws secretsmanager get-secret-value --secret-id pgsql_access_nasaws_db --query SecretString --output text | jq -r '.username')
            export DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id pgsql_access_nasaws_db --query SecretString --output text | jq -r '.password')
            export DB_HOST=$(aws secretsmanager get-secret-value --secret-id pgsql_access_nasaws_db --query SecretString --output text | jq -r '.host')
            export DB_PORT=$(aws secretsmanager get-secret-value --secret-id pgsql_access_nasaws_db --query SecretString --output text | jq -r '.port')
            export DB_NAME=$(aws secretsmanager get-secret-value --secret-id pgsql_access_nasaws_db --query SecretString --output text | jq -r '.dbname')
            pkill -f 'java -jar' || true
            nohup java -jar app.jar > app.log 2>&1 &
          EOF
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}